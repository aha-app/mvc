{
  "version": 3,
  "sources": ["../src/controller/ApplicationController.tsx", "../src/utils/randomId.ts", "../src/index.ts"],
  "sourcesContent": ["import React, { useContext, useEffect, useState } from 'react';\nimport type { ComponentType, FC, ReactNode } from 'react';\n// @ts-ignore\nimport { store } from '@aha-app/react-easy-state';\nimport Debug from 'debug';\nimport { randomId } from '../utils/randomId';\nimport CAF from 'caf';\nimport { cloneDeep } from 'lodash';\n\nconst debug = Debug('framework:controller');\n\nclass ControllerNoActionError extends Error {}\n\nexport type GenericApplicationController = ApplicationController<any, any, any>;\ninterface Constructor<C extends ApplicationController> {\n  new (...args: any[]): C;\n}\n\ntype ApplicationControllerConstructor<P> = {\n  new (): { initialize(props: P): Promise<void> };\n};\ntype GetControllerConstructor<T> = { new (): T };\n\ntype GetControllerProps<T extends ApplicationControllerConstructor<any>> =\n  T extends ApplicationControllerConstructor<infer P> ? P : never;\n\n/**\n * General rules to follow for using controllers:\n *\n * 1. Any data that should trigger React re-rendering should be stored in\n *    the `state` object.\n * 2. After adding data to `state` get a new reference to it, via the `state`\n *    object before using it again. This ensures that the new access or mutation\n *    is tracked.\n * 3. The `state` object, and any content within it, must only be mutated\n *    inside an `action...` function.\n * 4. Action functions can be called from anywhere, including event handlers,\n *    callbacks, after `await`, render methods, and from within other action\n *    functions.\n *\n */\nclass ApplicationController<\n  State = any,\n  Props = any,\n  Parent extends ApplicationController<any, any, any> = any\n> {\n  id: string;\n  initialized: boolean;\n  parent: Parent;\n  state: State & { _tempObservable: any };\n  cancelTokens: Record<string, any>;\n  proxiedThis: any;\n\n  constructor() {\n    this.id = randomId();\n    this.initialized = false;\n    this.parent = null;\n    this.state = undefined;\n    this.cancelTokens = {};\n\n    this.proxiedThis = new Proxy(this, {\n      // Traverse up through the controller hierarchy and find one that responds\n      // to the specified action.\n      get(targetController, prop, receiver) {\n        if (typeof prop === 'string' && prop.startsWith('action')) {\n          let currentController:\n            | ApplicationController<State, Props, Parent>\n            | Parent = targetController;\n          let currentProxy = receiver;\n          do {\n            if (prop in currentController) {\n              // We need to change this when the method is invoked, so rewrite\n              // the function.\n              return function (...args) {\n                return currentController[prop](...args);\n              };\n            }\n            // Look further up the hierarchy.\n            currentController = currentController.parent;\n            currentProxy = currentProxy.parent;\n          } while (currentController);\n\n          throw new ControllerNoActionError(\n            `Unable to find an action ${prop} on ${targetController.constructor.name}`\n          );\n        } else {\n          return Reflect.get(targetController, prop, receiver);\n        }\n      },\n      has(targetController, prop) {\n        if (typeof prop === 'string' && prop.startsWith('action')) {\n          let currentController:\n            | ApplicationController<State, Props, Parent>\n            | Parent = targetController;\n          do {\n            if (prop in currentController) {\n              return true;\n            }\n            currentController = currentController.parent;\n          } while (currentController);\n\n          return false;\n        } else {\n          return Reflect.has(targetController, prop);\n        }\n      },\n    });\n\n    return this.proxiedThis;\n  }\n\n  /**\n   * Controllers can override this method to initialize at mount with the\n   * original props passed to the controller wrapped component.\n   *\n   * @abstract\n   */\n  async initialize(props: Props): Promise<void> {}\n\n  /**\n   * Internal initializer function\n   *\n   * @hidden\n   */\n  internalInitialize(parentController: Parent, initialArgs: Props) {\n    if (!this.initialized) {\n      this.parent = parentController;\n\n      debug(\n        `Initializing ${this.constructor.name}${\n          parentController ? ' > ' + parentController.constructor.name : ''\n        }`\n      );\n\n      // @ts-ignore\n      this.state = store(cloneDeep(this.constructor.initialState));\n      if (this.initialize) this.initialize(initialArgs);\n      this.initialized = true;\n    } else {\n      this.changeProps(initialArgs);\n    }\n  }\n\n  /**\n   * Controllers can override this method to cleanup when removed\n   */\n  destroy() {}\n\n  internalDestroy() {\n    this.destroy();\n  }\n\n  /**\n   * Force a record to be an observed instance that will\n   * trigger observers on the controller state.\n   *\n   * You need this if you're using `.save()` to create a\n   * record and want the updated record to trigger state updates.\n   */\n  observable(obj: any) {\n    this.state._tempObservable = obj;\n    return this.state._tempObservable;\n  }\n\n  /**\n   * Run an async function that can be canceled using\n   * `cancelPending`. When canceled, the async function will not run\n   * its `then` (or anything following the `await`).\n   *\n   * `scope` is an arbitrary string that can be used in\n   * `cancelPending` to cancel only pending functions of a certain\n   * type.\n   *\n   * For example:\n   *   await this.cancelable(\"loadFilters\", async () => ...)\n   *   this.cancelPending(\"loadFilters\")\n   */\n  cancelable(scope: string, fn: (signal: any) => Promise<any>) {\n    let token = this.cancelTokens[scope];\n    if (!token) {\n      token = this.cancelTokens[scope] = new CAF.cancelToken(); // eslint-disable-line new-cap\n    }\n\n    const cancelableFn = CAF(function* (signal) {\n      return yield fn(signal);\n    });\n\n    return cancelableFn(token.signal);\n  }\n\n  /**\n   * Cancel all running cancelable functions created using `scope`.\n   */\n  cancelPending(scope: string) {\n    if (this.cancelTokens[scope]) {\n      this.cancelTokens[scope].abort(\n        `Cancelled pending functions for ${this.constructor.name}/${scope}`\n      );\n    }\n    delete this.cancelTokens[scope];\n  }\n\n  /**\n   * Cancel all running cancelable functions.\n   */\n  cancelAllPending() {\n    Object.keys(this.cancelTokens).forEach(scope => this.cancelPending(scope));\n  }\n\n  /**\n   * Cleanup the cancelable state after the operation is complete.\n   */\n  finishPending(scope: string) {\n    delete this.cancelTokens[scope];\n  }\n\n  /**\n   * Override in controller class to respond to changes in props\n   *\n   * @abstract\n   */\n  changeProps(newProps: Props) {}\n\n  /**\n   * Partially set state\n   */\n  setState(newState: Partial<State>) {\n    Object.keys(newState).forEach(key => {\n      this.state[key] = newState[key];\n    });\n  }\n\n  /**\n   * Extends instances of this controller with the properties defined in\n   * `mixin`. Will overwrite any existing properties of the same name.\n   */\n  static extend(mixin) {\n    Object.keys(mixin).forEach(key => {\n      const descriptor = Object.getOwnPropertyDescriptor(mixin, key);\n      Object.defineProperty(this.prototype, key, descriptor);\n    });\n  }\n}\n\n/**\n * Wrap a root React component using a new instance of a\n * controller. The controller will receive any props passed to the\n * component in its `initialize` method.\n *\n * When wrapped, any child component can use the `useController` hook\n * to receive the controller instance of its closest ancestor with a\n * ControllerScope.\n *\n * Example:\n *   export default StartControllerScope(WorkflowBoardController, WorkflowBoard);\n *\n * Inside a child component:\n *   const controller = useController();\n *\n * A reference to the controller can be retrieved from the component by\n * passing the `controllerRef` prop a value returned by `useRef()`.\n *\n * Example:\n *\n *   const whiteboardController = useRef();\n *   <Whiteboard controllerRef={whiteboardController} />\n *   ...\n *   whiteboardController.current.actionPanIntoView();\n */\nfunction StartControllerScope<T extends ApplicationControllerConstructor<any>>(\n  ControllerClass: T,\n  ControlledComponent: ComponentType<Partial<GetControllerProps<T>>>\n): ComponentType<GetControllerProps<T>> {\n  // Use React.memo here so if props don't change then we don't re-render and\n  // allocate a new controller instance.\n  return React.memo(controllerInitialArgs => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [controller] = useState(new ControllerClass());\n\n    if (controllerInitialArgs?.controllerRef) {\n      if (typeof controllerInitialArgs.controllerRef === 'function') {\n        controllerInitialArgs.controllerRef(controller);\n      } else if (\n        controllerInitialArgs.controllerRef.hasOwnProperty('current')\n      ) {\n        controllerInitialArgs.controllerRef.current = controller;\n      } else {\n        throw new Error(\n          'The controllerRef prop must be passed the value provided by useRef() or useCallback().'\n        );\n      }\n    }\n\n    return (\n      <Controller\n        controller={controller as any}\n        controllerInitialArgs={controllerInitialArgs}\n        key={(controller as any).id}\n      >\n        <ControlledComponent {...controllerInitialArgs} />\n      </Controller>\n    );\n  });\n}\n\nexport const ControllerContext = React.createContext(null);\n\n/**\n * A component that initializes a controller instance and wraps its\n * child with a context containing that instance.\n */\nfunction Controller<Props = {}>({\n  children,\n  controller,\n  controllerInitialArgs,\n}: {\n  children: ReactNode;\n  controller: ApplicationController<any, Props, any>;\n  controllerInitialArgs: Props;\n}) {\n  const parentController = useContext(ControllerContext);\n\n  controller.internalInitialize(parentController, controllerInitialArgs);\n\n  // Give controller a chance to deregister when it is removed.\n  useEffect(() => {\n    return () => {\n      debug('Destroying controller');\n      if (controller.destroy) controller.destroy();\n      controller.internalDestroy();\n    };\n  }, [controller]);\n\n  return (\n    <ControllerContext.Provider value={controller}>\n      {children}\n    </ControllerContext.Provider>\n  );\n}\n\n/**\n * Associate a controller with existing components. Useful if the same controller\n * needs to live longer than its direct parent in the component hierarchy.\n */\nconst ControlledComponent: FC<{\n  controller: ApplicationController<any, any, any>;\n}> = ({ children, controller }) => {\n  return (\n    <ControllerContext.Provider value={controller}>\n      {children}\n    </ControllerContext.Provider>\n  );\n};\n\n/**\n * Returns the controller instance created by the closest\n * ControllerContext.\n */\nfunction useController<T extends ApplicationController>(\n  controllerClass: GetControllerConstructor<T> | undefined = undefined\n): T {\n  let controller = useContext(ControllerContext);\n\n  // If a controller class constructor argument is given then traverse up the\n  // tree until the appropriate controller type is found\n  if (controllerClass) {\n    do {\n      if (controller.constructor === controllerClass) break;\n      controller = controller.parent;\n    } while (controller);\n  }\n\n  const statefulController: T = controller;\n  return statefulController;\n}\n\nexport {\n  ApplicationController,\n  StartControllerScope,\n  Controller,\n  ControlledComponent,\n  useController,\n};\n", "// Adds two arrays for the given base (10 or 16), returning the result.\n// This turns out to be the only \"primitive\" operation we need.\nconst add = function (x: number[], y: number[], base: number) {\n  const z = [];\n  const n = Math.max(x.length, y.length);\n  let carry = 0;\n  let i = 0;\n  while (i < n || carry) {\n    const xi = i < x.length ? x[i] : 0;\n    const yi = i < y.length ? y[i] : 0;\n    const zi = carry + xi + yi;\n    z.push(zi % base);\n    carry = Math.floor(zi / base);\n    i++;\n  }\n  return z;\n};\n\n// Returns a*x, where x is an array of decimal digits and a is an ordinary\n// JavaScript number. base is the number base of the array x.\nconst multiplyByNumber = function (num: number, x: number[], base: number) {\n  if (num < 0) {\n    return null;\n  }\n  if (num === 0) {\n    return [];\n  }\n  let result = [];\n  let power = x;\n  while (true) {\n    if (num & 1) {\n      result = add(result, power, base);\n    }\n    num = num >> 1;\n    if (num === 0) {\n      break;\n    }\n    power = add(power, power, base);\n  }\n  return result;\n};\nconst parseToDigitsArray = function (str, base) {\n  const digits = str.split('');\n  const ary = [];\n  let i = digits.length - 1;\n\n  while (i >= 0) {\n    const n = parseInt(digits[i], base);\n    if (isNaN(n)) {\n      return null;\n    }\n    ary.push(n);\n    i--;\n  }\n  return ary;\n};\nconst convertBase = function (str, fromBase, toBase) {\n  const digits = parseToDigitsArray(str, fromBase);\n  if (digits === null) {\n    return null;\n  }\n  let outArray = [];\n  let power = [1];\n  let i = 0;\n\n  while (i < digits.length) {\n    // invariant: at this point, fromBase^i = power\n    if (digits[i]) {\n      outArray = add(\n        outArray,\n        multiplyByNumber(digits[i], power, toBase),\n        toBase\n      );\n    }\n    power = multiplyByNumber(fromBase, power, toBase);\n    i++;\n  }\n  let out = '';\n  i = outArray.length - 1;\n\n  while (i >= 0) {\n    out += outArray[i].toString(toBase);\n    i--;\n  }\n  return out;\n};\n\n//\n// Generate a random ID that can be used in the database.\n//\nexport const randomId = function () {\n  const time = new Date();\n  const now = Math.round((time.getTime() / 1000) * 256);\n  // We want to take the lower 5 bytes from the timestamp, but JS bitwise ops\n  // coerce ints to 4 bytes first. So, we split our 64-bit version of our timestamp\n  // into high and low 32 bits.\n  const now_low = now & 0xffffffff;\n  const now_high = (now - now_low) / 0x100000000 - 0x00000001;\n  const num = [];\n  num[0] = (now_high >> 0) & 0xff;\n  num[1] = (now_low >> 24) & 0xff;\n  num[2] = (now_low >> 16) & 0xff;\n  num[3] = (now_low >> 8) & 0xff;\n  num[4] = (now_low >> 0) & 0xff;\n  num[5] = Math.floor(Math.random() * 255);\n  num[6] = Math.floor(Math.random() * 255);\n  num[7] = Math.floor(Math.random() * 255);\n\n  let hex = '';\n  let _i = 0;\n  const _len = num.length;\n  while (_i < _len) {\n    const n = num[_i];\n    const h = n.toString(16);\n    if (n < 16) {\n      hex = `${hex}0${h}`;\n    } else {\n      hex = hex + h;\n    }\n    _i++;\n  }\n  return convertBase(hex, 16, 10);\n};\n", "import {\n  ApplicationController,\n  StartControllerScope,\n  ControlledComponent,\n  useController,\n} from './controller/ApplicationController';\n// @ts-ignore\nimport { view } from '@aha-app/react-easy-state';\nimport { raw, observe, unobserve } from '@nx-js/observer-util';\nimport { randomId } from './utils/randomId';\nimport type { ComponentType } from 'react';\n\nfunction ApplicationView<T extends ComponentType>(component: T): T {\n  return view(component);\n}\n\n// Export our public API.\nexport default ApplicationController;\nexport {\n  // Controller\n  ApplicationController,\n  StartControllerScope,\n  ControlledComponent,\n  useController,\n  // View\n  ApplicationView,\n  // observer.\n  raw,\n  observe,\n  unobserve,\n  // utils\n  randomId,\n};\n"],
  "mappings": "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",
  "names": []
}
